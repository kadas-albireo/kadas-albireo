#ifndef _QEMBED_1804289383
#define _QEMBED_1804289383
#include <qimage.h>
#include <qdict.h>
static const QRgb icon_data[] = {
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5000000,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x19000300,0x3e000700,0x5a143e1b,0x8d3b7753,0xb73f8863,
    0xcf378a61,0xa3446d71,0x3295d5ff,0x18ec6ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32001900,
    0x61004400,0x70005500,0x81006300,0x8c209527,0xca58cb82,0xfc6bce9c,0xff5ec59b,0xff5dc79c,0xff6cc193,0xff80a3c9,0xff82bef8,0xdc74b5f8,0x5c7fc5fe,0x280c4ff,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x82284200,0x76319c00,0x5f00c100,0x944cd45a,0xf871d69b,0xff72d89e,0xff7fe19f,
    0xff8cb472,0xff92a461,0xff69a376,0xffb9ebfc,0xffade5ff,0xff9cd8fe,0xff78b8f9,0xb16db4fa,0xc75c0ff,0x0,0x0,0x0,0x0,0x0,
    0x110d0300,0xcb644700,0xc2835f00,0xc77f8b31,0xfe6ed29d,0xff70d9a0,0xff7ce1a0,0xff84e29f,0xff96904b,0xff98843e,0xff828766,0xffc5f5ff,0xffb2e8ff,0xff9edbff,
    0xff8bceff,0xff6cb5fb,0xbf5da9f9,0x56ebbff,0x0,0x0,0x0,0x0,0x56261600,0xc2815f00,0xbf7f7919,0xf963c597,0xff63d1a0,0xff76d99f,
    0xff8be0a0,0xff94e29e,0xff9c8942,0xff9c853f,0xff919f90,0xffc4f5ff,0xffb2e8ff,0xff9ed9fe,0xff8bceff,0xff78c2ff,0xff4c97f3,0x875dabfb,0x0,0x0,
    0x0,0x0,0x964e3200,0xc0816000,0xe88b7329,0xff55ae88,0xff7ad99f,0xff8cd493,0xff93b471,0xff989a55,0xff9b843e,0xff917e3a,0xff9db6bf,0xffbbe8fd,
    0xffb6e2fd,0xff9ad4fd,0xff88ccff,0xff75c0ff,0xff59a7fa,0xf7347cea,0x1d64b4ff,0x0,0x0,0x9240000,0xca604200,0xc3826304,0xfd787540,0xff56ba94,
    0xff84dfa0,0xff8eb472,0xff98843f,0xff97843f,0xff92833f,0xff746633,0xffb8e6f5,0xffb1e8ff,0xffa2deff,0xff92d3ff,0xff7fc6fe,0xff6fbcff,0xff57a8fc,0xff0e49d5,
    0x785aabfd,0x0,0x0,0x4e261000,0xc27e5d00,0xd082872e,0xff2d988c,0xff4db596,0xff8ab473,0xff8eab68,0xff96843f,0xff95833e,0xff8d803e,0xff737458,
    0xfface4ff,0xffa2deff,0xff96d6ff,0xff87ccff,0xff79c0fd,0xff67b6ff,0xff418cf1,0xff0237cd,0xc0408ef3,0x0,0x0,0x8a493000,0xc1815f00,0xd56c9448,
    0xff187373,0xff2e655d,0xff5c644f,0xff767a62,0xff8a8e7e,0xff929b92,0xff92a6ab,0xff94bed6,0xffa1dafe,0xff92d3ff,0xff87ccff,0xff7ac3ff,0xff6cb9fe,0xff62aefb,
    0xff3670e1,0xff1a54d9,0xdf357eec,0x0,0x0,0x4f1a0e00,0x45110600,0x9583a4b2,0xff215dd3,0xff2d71e2,0xff3b87eb,0xff68befb,0xffbbe8fe,0xffd0f1ff,
    0xffd2f1ff,0xffd2f2ff,0xffbce5fe,0xff81c8ff,0xff78c2ff,0xff6cbaff,0xff5faffd,0xff5fa0f3,0xff346ee1,0xff2763de,0xe9418ef2,0x0,0x0,0x0,
    0x0,0x61b7ecff,0xff1f5ad9,0xff205fdc,0xff2b6ee1,0xff3b7fe7,0xff94caf9,0xffc1e8fd,0xffcaeefe,0xffcbeefe,0xffc3e9fe,0xff6fbcff,0xff5fadfb,0xff4189ee,
    0xff5b96ec,0xff72a9f2,0xff4780e6,0xff4e8fed,0xd24d9bf7,0x0,0x0,0x0,0x0,0x2eaee6ff,0xff3971de,0xff0f48d3,0xff225edb,0xff5f94ea,
    0xffa9d5fa,0xffb7e0fc,0xffc1e8fd,0xffc7ecfe,0xffc6ebfe,0xff3f7de5,0xff1d5bda,0xff467ce2,0xff94c5f7,0xff7eb0f2,0xff0437cd,0xff1c52d7,0x9f51a2fa,0x0,
    0x0,0x0,0x0,0xbfffff,0xda6ba4ee,0xff0135cd,0xff6a9aeb,0xffa7d4fa,0xffb9e2fc,0xffc8edfe,0xffd2f2ff,0xffd7f3ff,0xffd7f3ff,0xff84aeee,
    0xff487ae0,0xffa7d2f8,0xffa0cef8,0xff75a6ee,0xff1345d2,0xff2c68e0,0x4d51a8ff,0x0,0x0,0x0,0x0,0x0,0x5e99d7fe,0xff3267dc,
    0xff8ebcf4,0xffb1dbfb,0xffc5eafe,0xffd4f2ff,0xffdff5ff,0xffe6f7ff,0xffe5f7ff,0xffdef5ff,0xffd2f1ff,0xffc2e8fd,0xff9cc7f6,0xff95c6f7,0xff80b5f4,0xcf5ba6f9,
    0x255aaff,0x0,0x0,0x0,0x0,0x0,0x292d3ff,0xb882c0f8,0xff7baaee,0xffb6dffc,0xffcbeefe,0xffdaf4ff,0xffe8f8ff,0xfff3fbff,
    0xfff2fbff,0xffe6f7ff,0xffd8f3ff,0xffc8edfe,0xffb3ddfb,0xff9ecdf9,0xf776b6f9,0x3651a8ff,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x1088cdff,0xcb90cdfd,0xffb4defc,0xffcbeefe,0xffdaf4ff,0xffe8f8ff,0xfff4fcff,0xfff3fbff,0xffe6f7ff,0xffd8f3ff,0xffc8edfe,0xffb3ddfb,0xf986c1fb,
    0x5656aafe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa7fc6ff,0x9c88cafe,0xfdaadafd,0xff89aeed,
    0xffaac6f3,0xffcbe0f9,0xffc5dbf8,0xffd3ebfc,0xffd2f2ff,0xffb8e3fe,0xda7cc0fd,0x3c52a9ff,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x2e70bcff,0x915fa5f6,0xda3f7fe8,0xf9306ee3,0xfe2e6be1,0xec2d6ee4,0xb5599df4,0x6157abff,
    0x550a9ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x15eaeff,0x65aaeff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};

/* Generated by qembed */
static struct EmbedImage {
    int width, height, depth;
    const unsigned char *data;
    int numColors;
    const QRgb *colorTable;
    bool alpha;
    const char *name;
} embed_image_vec[] = {
    { 22, 22, 32, (const unsigned char*)icon_data, 0, 0, TRUE, "icon" },
    { 0, 0, 0, 0, 0, 0, 0, 0 }
};

static const QImage& qembed_findImage( const QString& name )
{
    static QDict<QImage> dict;
    QImage* img = dict.find( name );
    if ( !img ) {
	for ( int i = 0; embed_image_vec[i].data; i++ ) {
	    if ( strcmp(embed_image_vec[i].name, name.latin1()) == 0 ) {
		img = new QImage((uchar*)embed_image_vec[i].data,
			    embed_image_vec[i].width,
			    embed_image_vec[i].height,
			    embed_image_vec[i].depth,
			    (QRgb*)embed_image_vec[i].colorTable,
			    embed_image_vec[i].numColors,
			    QImage::BigEndian );
		if ( embed_image_vec[i].alpha )
		    img->setAlphaBuffer( TRUE );
		dict.insert( name, img );
		break;
	    }
	}
	if ( !img ) {
	    static QImage dummy;
	    return dummy;
	}
    }
    return *img;
}

#endif
