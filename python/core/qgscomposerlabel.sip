/** \ingroup MapComposer
 * A label that can be placed onto a map composition.
 */
class QgsComposerLabel: QgsComposerItem
{
%TypeHeaderCode
#include "qgscomposerlabel.h"
%End
  public:
    QgsComposerLabel( QgsComposition *composition /TransferThis/);
    ~QgsComposerLabel();

    /** return correct graphics item type. Added in v1.7 */
    virtual int type() const;

    /** \brief Reimplementation of QCanvasItem::paint*/
    void paint( QPainter* painter, const QStyleOptionGraphicsItem* itemStyle, QWidget* pWidget );

    /**resizes the widget such that the text fits to the item. Keeps top left point*/
    void adjustSizeToText();

    QString text();
    void setText( const QString& text );

     /**Returns the text as it appears on screen (with replaced data field)
      @note this function was added in version 1.2*/
    QString displayText() const;

    /** Accessor for the vertical alignment of the label
     * @param none
     * @returns Qt::AlignmentFlag
     */
    Qt::AlignmentFlag vAlign() const;
    /** Accessor for the horizontal alignment of the label
     * @param none
     * @returns Qt::AlignmentFlag
     */
    Qt::AlignmentFlag hAlign() const;
    /** Mutator for the horizontal alignment of the label
     * @param Qt::AlignmentFlag
     * @returns void
     */
    void setHAlign( Qt::AlignmentFlag a );
    /** Mutator for the vertical alignment of the label
     * @param QQt::AlignmentFlag
     * @returns void
     */
    void setVAlign( Qt::AlignmentFlag a );

    //!brief Accessor for the margin of the label
    double margin();
    //!brief Mutator for the margin of the label
    void setMargin( double m );


    /**Get font color
      @note: this function was added in version 1.4*/
    QFont font() const;
    void setFont( const QFont& f );

    /**Sets text color
    @note: this function was added in version 1.4*/
    void setFontColor( const QColor& c);

    QColor fontColor() const;

    /** stores state in Dom node
       * @param node is Dom node corresponding to 'Composer' tag
       * @param temp write template file
       */
    bool writeXML( QDomElement& elem, QDomDocument & doc ) const;

    /** sets state from Dom document
       * @param node is Dom node corresponding to 'ComposerLabel' tag
       */
    bool readXML( const QDomElement& itemElem, const QDomDocument& doc );
};
