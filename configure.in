
dnl Process this file with autoconf to produce a configure script.
dnl configure.in,v 1.133 2004/06/13 22:04:47 timlinux Exp

AC_INIT

#AC_CONFIG_SRCDIR([libtool])

dnl header sentinals for qgsconfig.h
AH_TOP(
[#ifndef QGSCONFIG_H
 #define QGSCONFIG_H
])
AH_BOTTOM(
[#endif]
)

AC_PREREQ(2.52)
AC_CONFIG_HEADERS(qgsconfig.h)
 
dnl ---------------------------------------------------------------------------
dnl version number
dnl ---------------------------------------------------------------------------
MAJOR_VERSION=0
MINOR_VERSION=3
MICRO_VERSION=0
EXTRA_VERSION=34
if test $EXTRA_VERSION -eq 0; then
    VERSION=${MAJOR_VERSION}.${MINOR_VERSION}.${MICRO_VERSION}
else
   VERSION=${MAJOR_VERSION}.${MINOR_VERSION}.${MICRO_VERSION}devel${EXTRA_VERSION}
fi

AM_INIT_AUTOMAKE(qgis, ${VERSION})

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)
AC_SUBST(EXTRA_VERSION)

AC_PREFIX_PROGRAM(gcc)

AC_PROG_CXX

AC_LANG([C++])

AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_INSTALL

AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL


dnl ---------------------------------------------------------------------------
dnl Check for Endian stuff to manage big endian anomalies
dnl ---------------------------------------------------------------------------

AC_C_BIGENDIAN
AC_CHECK_HEADERS([endian.h])
AC_CHECK_HEADERS([machine/endian.h])


dnl ---------------------------------------------------------------------------
dnl Qt check
dnl ---------------------------------------------------------------------------
AQ_CHECK_QT


dnl ---------------------------------------------------------------------------
dnl GDAL/OGR
dnl ---------------------------------------------------------------------------
AQ_CHECK_GDAL


dnl ---------------------------------------------------------------------------
dnl PostgreSQL
dnl ---------------------------------------------------------------------------
AC_ARG_WITH(postgresql,
  AC_HELP_STRING([--with-postgresql=path],
                 [PostgreSQL (PostGIS) Support (full path to pg_config)]))

AC_MSG_CHECKING([for PostgreSQL])
if test x"$with_postgresql" = "xyes" -o x"$with_postgresql" = "x" ; then
  AC_MSG_RESULT([yes])
  AC_PATH_PROG([PG_CONFIG], [pg_config], [no])
elif test x"$with_postgresql" = "xno" ; then
  AC_MSG_RESULT([no])
  PG_CONFIG=no
else
  AC_MSG_RESULT([yes])
  PG_CONFIG="$with_postgresql/pg_config"
fi

if test x"$PG_CONFIG" != "xno" ; then
  PG_LIB="-L`$PG_CONFIG --libdir` -lpq"
  PG_INC="`$PG_CONFIG --includedir`"
  AC_MSG_CHECKING([for postgreSQL libs])
  AC_MSG_RESULT([$PG_LIB])
  AC_DEFINE([HAVE_POSTGRESQL],1,
    [Define to 1 if PostgreSQL is available])
  ac_postgresql="yes"
else
  ac_postgresql="no"
fi

AC_SUBST(PG_INC)
AC_SUBST(PG_LIB)

AM_CONDITIONAL([HAVE_POSTGRESQL], [test "$ac_postgresql" = "yes"])


dnl ---------------------------------------------------------------------------
dnl checking if gdal and/or postgresql are available
dnl ---------------------------------------------------------------------------
if test x"$ac_postgresql" = "xno" -a x"$ac_gdalogr" = "xno"; then
  AC_MSG_ERROR("QGIS without GDAL(with OGR support) and PostgreSQL makes no sense!")
fi


dnl ---------------------------------------------------------------------------
dnl SPIT plugin
dnl ---------------------------------------------------------------------------
AC_ARG_ENABLE(spit,
  AC_HELP_STRING([--disable-spit],
                 [disable Shapefile to PostgreSQL (PostGIS) import plugin (built by default with PostgreSQL support)]),
  [ac_spit=$enableval], [ac_spit=yes])
                 
AC_MSG_CHECKING([for SPIT])
if test x"$ac_spit" = "xyes"; then
  if test x"$ac_postgresql" = "xyes" -a x"$ac_gdalogr" = "xyes"; then
    AC_MSG_RESULT([yes])
  else
    ac_spit="no"
    if test x"$ac_postgresql" = "xno" ; then
      AC_MSG_RESULT([no (PostgreSQL not available)])
    else
      AC_MSG_RESULT([no (GDAL with OGR support not available)])
    fi
  fi
else
  AC_MSG_RESULT([no])
fi

AM_CONDITIONAL([HAVE_SPIT], [test "$ac_spit" = "yes"])


dnl ---------------------------------------------------------------------------
dnl GRASS package
dnl ---------------------------------------------------------------------------
AC_ARG_WITH(grass,
    AC_HELP_STRING([--with-grass=DIR],[GRASS Support (full path to GRASS binary package, e.g. --with-grass=/usr1/grass57/dist.i686-pc-linux-gnu)]))

    AC_MSG_CHECKING([for GRASS])

if test -n "$with_grass" -a x"$with_grass" != "xno"; then
    # I don't know how to add library path to AC_CHECK_LIB()
    GISLIB=`ls $with_grass/lib/libgrass_gis.*`  
    if test ! -f "$GISLIB"; then
	AC_MSG_ERROR( [GRASS library not found] )
    fi
    GRASS_LIB="-L$with_grass/lib/ -lgrass_vect -lgrass_dig2 -lgrass_dbmiclient -lgrass_dbmibase -lgrass_shape -lgrass_dgl -lgrass_rtree -lgrass_gis -lgrass_datetime -lgrass_linkm -lgrass_form"

    GISINC=`ls $with_grass/include/gis.h`
    if test ! -f "$GISINC"; then
	AC_MSG_ERROR( [GRASS headers not found] )
    fi

    GRASS_INC="$with_grass/include/"
    HAVE_GRASS=1
    AC_MSG_RESULT([yes])
    ac_grass="yes"
else 
    AC_MSG_RESULT([no])
    ac_grass="no"
fi

AC_SUBST(HAVE_GRASS)
AC_SUBST(GRASS_LIB)
AC_SUBST(GRASS_INC)
AM_CONDITIONAL([HAVE_GRASS], [test "$ac_grass" = "yes"])



dnl ---------------------------------------------------------------------------
dnl Debugging
dnl ---------------------------------------------------------------------------
AC_ARG_ENABLE(debug,
  AC_HELP_STRING([--enable-debug],
                 [Enable debuging messages [[default=no]]]),
        [ac_debug=$enableval], [ac_debug=no])

AC_MSG_CHECKING([if debug statements should be sent to stdout/stderr])
if test x"$ac_debug" = "xno" ; then
  DEBUG_QGIS=-DNO_DEBUG
  AC_MSG_RESULT([no])
else
  DEBUG_QGIS=-DQGISDEBUG
  AC_MSG_RESULT([yes])
fi
AC_SUBST(DEBUG_QGIS)


#echo ${prefix}/lib
#ac_libdir=${prefix}/lib/$PACKAGE
#AC_MSG_CHECKING([plugin install directory])
#AC_MSG_RESULT([$libdir])
#echo Plugins will be installed in $libdir

AC_CONFIG_FILES([
  Makefile 
  src/Makefile 
  src/svg/Makefile
  src/svg/biology/Makefile
  src/svg/geometric/Makefile
  src/svg/icon/Makefile
  src/svg/north_arrows/Makefile
  src/svg/symbol/Makefile
  src/images/Makefile
  src/images/north_arrows/Makefile
  src/images/splash/Makefile
  src/images/icons/Makefile
	src/themes/Makefile
	src/themes/default/Makefile
  providers/Makefile 
  providers/ogr/Makefile
  providers/postgres/Makefile
  providers/delimitedtext/Makefile
  providers/grass/Makefile
  providers/gpx/Makefile
  plugins/Makefile
  plugins/spit/Makefile
  plugins/example/Makefile
  plugins/maplayer/Makefile
  plugins/geoprocessing/Makefile
  plugins/gps_importer/Makefile
  plugins/grid_maker/Makefile
  plugins/grass/Makefile
  doc/Makefile
  doc/skin/Makefile
  doc/skin/images/Makefile
  doc/images/Makefile
  doc/plugins/Makefile
  doc/plugins/geoprocessing/Makefile
  doc/plugins/geoprocessing/buffer/Makefile
  doc/plugins/delimited_text/Makefile
  qgis.spec
  plugins/delimited_text/Makefile
  tools/Makefile
  tools/qgis_config/Makefile
  i18n/Makefile
	plugins/north_arrow/Makefile
	plugins/copyright_label/Makefile
	plugins/scale_bar/Makefile
])

AC_OUTPUT

dnl Output the configuration summary
echo ""
echo "=========================================="
echo "$PACKAGE $VERSION"
echo "------------------------------------------"
echo "GDAL/OGR      : $ac_gdalogr"
echo "PostgreSQL    : $ac_postgresql"
echo "GRASS         : $ac_grass"
echo "SPIT          : $ac_spit"
echo ""
echo "Debug         : $ac_debug"
echo "Plugin dir    : ${libdir}/$PACKAGE"
echo ""
echo "The binary will be installed in $prefix/bin"
echo "------------------------------------------"
echo "Configure finished, type 'make' to build."
