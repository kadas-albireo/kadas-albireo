SET (QGIS_PYTHON_OUTPUT_DIRECTORY ${QGIS_OUTPUT_DIRECTORY}/python/qgis)
SET (QGIS_MILX_PYTHON_OUTPUT_DIRECTORY ${QGIS_OUTPUT_DIRECTORY}/python/qgis/milx)
SET (QGIS_PYTHON_DIR ${PYTHON_SITE_PACKAGES_DIR}/${QGIS_APP_NAME})

INCLUDE_DIRECTORIES(
  ${PYTHON_INCLUDE_PATH}
  ${GDAL_INCLUDE_DIR} # HACK: SIP_INCLUDE_DIR is wrong under windows, we need <OSGeo4W>\include, not <OSGeo4W>\apps\Python27\include. Abusing of GDAL_INCLUDE_DIR since it happens to point to <OSGeo4W>\include
  ${SIP_INCLUDE_DIR}
  ..
  ../../../core
  ../../../gui
  ../../../gui/layertree
)

IF(WIN32)
    ADD_DEFINITIONS("\"-DQGS_MILX_EXPORT=${DLLIMPORT}\"")
ELSE(WIN32)
    ADD_DEFINITIONS("-DQGS_MILX_EXPORT=")
ENDIF(WIN32)


SET(SIP_INCLUDES ${SIP_INCLUDES})

SET(SIP_DISABLE_FEATURES ${SIP_DISABLE_FEATURES} QSETINT_CONVERSION)
SET(SIP_DISABLE_FEATURES ${SIP_DISABLE_FEATURES} QSETTYPE_CONVERSION)
SET(SIP_DISABLE_FEATURES ${SIP_DISABLE_FEATURES} QVECTORINT_CONVERSION)
SET(SIP_DISABLE_FEATURES ${SIP_DISABLE_FEATURES} HAVE_QSCI_SIP)

# globe module
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${QGIS_PYTHON_OUTPUT_DIRECTORY})
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${QGIS_PYTHON_OUTPUT_DIRECTORY})
FILE(GLOB_RECURSE sip_files_milx *.sip)
SET(SIP_EXTRA_FILES_DEPEND ${sip_files_milx})
SET(SIP_EXTRA_OPTIONS ${PYQT4_SIP_FLAGS} -o -a ${CMAKE_BINARY_DIR}/python/qgis.milx.api)
ADD_SIP_PYTHON_MODULE(qgis._milx milx.sip qgs_milx qgis_core qgis_gui)

# Plugin utilities files to copy to staging or install
SET(PY_FILES
  __init__.py
)

# stage to output to make available when QGIS is run from build directory
ADD_CUSTOM_TARGET(milxpyutils ALL)
INSTALL(FILES ${PY_FILES} DESTINATION "${QGIS_PYTHON_DIR}/milx")
FOREACH(pyfile ${PY_FILES})
  ADD_CUSTOM_COMMAND(TARGET milxpyutils
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory "${QGIS_MILX_PYTHON_OUTPUT_DIRECTORY}"
    COMMAND ${CMAKE_COMMAND} -E copy ${pyfile} "${QGIS_MILX_PYTHON_OUTPUT_DIRECTORY}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    DEPENDS ${pyfile}
  )
ENDFOREACH(pyfile)

# Byte-compile staged PyQGIS utilities
IF(WITH_PY_COMPILE)
  ADD_CUSTOM_TARGET(pycompile-pyutils ALL
    COMMAND ${PYTHON_EXECUTABLE} -m compileall -q "${QGIS_MILX_PYTHON_OUTPUT_DIRECTORY}"
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}"
    COMMENT "Byte-compiling staged PyQGIS utility modules..."
    DEPENDS milxpyutils
  )
ENDIF(WITH_PY_COMPILE)
