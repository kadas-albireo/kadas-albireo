ADD_DEFINITIONS(-DGRASS_BASE=\\\"${GRASS_PREFIX}\\\")

########################################################
# Build

INCLUDE_DIRECTORIES(
  ../../core
  ../../core/raster
  ${GRASS_INCLUDE_DIR}
  ${GDAL_INCLUDE_DIR}
  ${PROJ_INCLUDE_DIR}
  ${GEOS_INCLUDE_DIR}
)

#
# GRASS library
#

QT4_WRAP_CPP(GRASS_PROVIDER_MOC_SRCS qgsgrassprovider.h)
ADD_LIBRARY(qgisgrass SHARED qgsgrass.cpp qgsgrassprovider.cpp ${GRASS_PROVIDER_MOC_SRCS})

SET_TARGET_PROPERTIES(qgisgrass PROPERTIES
  CLEAN_DIRECT_OUTPUT 1
  FRAMEWORK 1
  FRAMEWORK_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}"
  MACOSX_FRAMEWORK_INFO_PLIST "${CMAKE_SOURCE_DIR}/mac/framework.info.plist.in"
  MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${COMPLETE_VERSION}
  MACOSX_FRAMEWORK_IDENTIFIER org.qgis.qgisgrass
  COMPILE_FLAGS "\"-DGRASS_LIB_EXPORT=${DLLEXPORT}\" \"-DGRASS_EXPORT=${DLLIMPORT}\"" )

#generate unversioned libs for android
IF (NOT ANDROID)
  SET_TARGET_PROPERTIES(qgisgrass PROPERTIES
    VERSION ${COMPLETE_VERSION}
    SOVERSION ${COMPLETE_VERSION}
    )
ENDIF (NOT ANDROID)

TARGET_LINK_LIBRARIES(qgisgrass
  qgis_core
  ${GRASS_LIBRARY_gis}
  ${GRASS_LIBRARY_vect}
  ${GRASS_LIBRARY_dbmibase}
  ${GRASS_LIBRARY_dbmiclient}
  ${GRASS_LIBRARY_gproj}
)

IF (APPLE)
  SET_TARGET_PROPERTIES(qgisgrass PROPERTIES BUILD_WITH_INSTALL_RPATH TRUE)
ENDIF (APPLE)

#
# Fake GRASS gis library
#

# Generate functions mapping for funcions used in original version
# Create list of functions to be mapped
SET ( FUNCTIONS 
  "G_add_color_rule"
  "G_adjust_Cell_head"
  "G_align_window"
  "G_allocate_cell_buf"
  "G_allocate_raster_buf"
  "G__calloc"
  "G_col_to_easting"
  "G_define_flag"
  "G_define_module"
  "G_define_option"
  "G_define_standard_option"
  "G_free"
  "G_get_fp_range_min_max"
  "G_get_range_min_max"
  "G_get_window"
  "G_get_set_window"
  "G__init_null_patterns"
  "G_incr_void_ptr"
  "G_init_colors"
  "G_init_fp_range"
  "G_init_raster_cats"
  "G_init_range"
  "G_is_c_null_value"
  "G_is_d_null_value"
  "G__malloc"
  "G_percent"
  "G_program_name"
  "G_projection"
  "G_quant_add_rule"
  "G_quant_free"
  "G_quant_get_limits"
  "G_quant_init"
  "G__realloc"
  "G_raster_size"
  "G_row_to_northing"
  "G_set_c_null_value"
  "G_set_d_null_value"
  "G_set_d_raster_cat"
  "G_set_gisrc_mode"
  "G_set_null_value"
  "G_set_raster_cats_title"
  "G_set_raster_value_d"
  "G_set_window"
  "G_setenv"
  "G_strip"
  "G_suppress_masking"
  "G_trim_decimal"
  "G_update_fp_range"
  "G_update_range"
  "G_window_cols"
  "G_window_rows"
  "G_zero"
)

# Read GRASS header file and create functions mapping
FILE(READ "${GRASS_INCLUDE_DIR}/grass/gisdefs.h" HEADER_FILE)

# Function definitions in gisdefs.h may spread over more lines -> remove comments
# and split by ';'
# Remove comments and directives (some macros are lost)
STRING(REGEX REPLACE "(/\\*([^*]|[\r\n]|(\\*+([^*/]|[\r\n])))*\\*+/)" "" HEADER_FILE "${HEADER_FILE}") 
STRING(REGEX REPLACE "#[^\r\n]*" "" HEADER_FILE "${HEADER_FILE}")

SET ( FUNCTIONS_MAP "// Auto generated by cmake, do not edit\n" )
LIST ( APPEND FUNCTIONS_MAP "#include \"qgsgrassgislib.h\"\n" )
LIST ( APPEND FUNCTIONS_MAP "#include \"qgslogger.h\"\n" )
LIST ( APPEND FUNCTIONS_MAP "#include \"qgis.h\"\n" )
FOREACH( ROW ${HEADER_FILE} )
  STRING(REGEX REPLACE "\n" " " ROW "${ROW}")
  STRING(REGEX REPLACE "__attribute__.*" "" ROW "${ROW}")
  #MESSAGE (STATUS, "ROW: ${ROW}") 
  # Parse function declaration
  STRING( REGEX REPLACE ".*(G_[^\\(]*)\\(.*" "\\1" FUNCTION_NAME "${ROW}" )
  FOREACH( FN ${FUNCTIONS} )
    IF ( "${FN}" STREQUAL "${FUNCTION_NAME}" ) 
      LIST ( APPEND FUNCTIONS_MAP "// ${ROW}\n" )
      # \\*? and \\** patterns do not work, why?
      STRING( REGEX REPLACE "(.*)G_.*" "\\1" FUNCTION_TYPE "${ROW}" )
      STRING( REGEX REPLACE "\\*" "" FUNCTION_TYPE "${FUNCTION_TYPE}" )
      STRING( REGEX REPLACE ".*(\\*+) *G_.*" "\\1" POINTER "${ROW}" )
      IF ( NOT "${POINTER}" STREQUAL "*" ) 
        SET ( POINTER "" )
      ENDIF ( NOT "${POINTER}" STREQUAL "*" )
      STRING( REGEX REPLACE ".*G_[^\\(]*\\((.*)\\).*" "\\1" PARAM_TYPES "${ROW}" )
      SET ( PARAM_NAMES "" )
      SET ( PARAMS "" )
      IF ( NOT "${PARAM_TYPES}" STREQUAL "void" )
        STRING ( REGEX MATCHALL "[^,]+" PARAM_TYPE_LIST ${PARAM_TYPES} )
        SET ( I 0 )
        FOREACH( PARAM_TYPE ${PARAM_TYPE_LIST} )
          LIST ( APPEND PARAM_NAMES "p${I}" )
          LIST ( APPEND PARAMS "${PARAM_TYPE} p${I}" )
          MATH(EXPR  I "${I} + 1")
        ENDFOREACH ( PARAM_TYPE )
      ENDIF ( NOT "${PARAM_TYPES}" STREQUAL "void" )

      STRING( REPLACE ";" ", " PARAM_NAMES "${PARAM_NAMES}" )
      STRING( REPLACE ";" ", " PARAMS "${PARAMS}" )

      # Declare function type
      LIST ( APPEND FUNCTIONS_MAP "typedef ${FUNCTION_TYPE} ${POINTER} ${FUNCTION_NAME}_type(${PARAM_TYPES})\;\n\n" )
      LIST ( APPEND FUNCTIONS_MAP "${FUNCTION_TYPE} GRASS_LIB_EXPORT ${POINTER} ${FUNCTION_NAME} ( ${PARAMS} ) {\n" )
      #LIST ( APPEND FUNCTIONS_MAP "  QgsDebugMsg( \"Entered\" )\;\n" )
    
      LIST ( APPEND FUNCTIONS_MAP "  ${FUNCTION_NAME}_type* fn = (${FUNCTION_NAME}_type*) cast_to_fptr (QgsGrassGisLib::instance()->resolve( \"${FUNCTION_NAME}\" ))\;\n" )
      LIST ( APPEND FUNCTIONS_MAP "  return fn( ${PARAM_NAMES} )\;\n")
      LIST ( APPEND FUNCTIONS_MAP "}\n\n" )
    ENDIF ( "${FN}" STREQUAL "${FUNCTION_NAME}" ) 
  ENDFOREACH ( FN )
ENDFOREACH( ROW )

FILE(WRITE "${CMAKE_CURRENT_BINARY_DIR}/qgsgrassgislibfunctions.cpp" ${FUNCTIONS_MAP})


# Build fake library
SET (FAKE_LIB_GRASS_GIS "grass_gis.${GRASS_VERSION}")
ADD_LIBRARY( ${FAKE_LIB_GRASS_GIS} MODULE qgsgrassgislib.cpp qgsgrassgislibfunctions.cpp )

SET_TARGET_PROPERTIES(${FAKE_LIB_GRASS_GIS} PROPERTIES
  CLEAN_DIRECT_OUTPUT 1
  FRAMEWORK 1
  FRAMEWORK_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}"
  MACOSX_FRAMEWORK_INFO_PLIST "${CMAKE_SOURCE_DIR}/mac/framework.info.plist.in"
  MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${COMPLETE_VERSION}
  MACOSX_FRAMEWORK_IDENTIFIER org.qgis.qgisgrassgislib
  COMPILE_FLAGS "\"-DGRASS_LIB_EXPORT=${DLLEXPORT}\" \"-DGRASS_EXPORT=${DLLIMPORT}\" -DGRASS_LIBRARY_GIS=\\\"${GRASS_LIBRARY_gis}\\\" \"-I${CMAKE_CURRENT_SOURCE_DIR}\" ")

SET_TARGET_PROPERTIES(${FAKE_LIB_GRASS_GIS} PROPERTIES
  VERSION ${COMPLETE_VERSION}
  SOVERSION ${COMPLETE_VERSION}
  )

TARGET_LINK_LIBRARIES(${FAKE_LIB_GRASS_GIS}
  qgis_core
)

IF (APPLE)
  SET_TARGET_PROPERTIES(${FAKE_LIB_GRASS_GIS} PROPERTIES BUILD_WITH_INSTALL_RPATH TRUE)
ENDIF (APPLE)

#
# GRASS vector provider
#

ADD_LIBRARY(grassprovider MODULE qgsgrassprovidermodule.cpp)
SET_TARGET_PROPERTIES(grassprovider PROPERTIES COMPILE_FLAGS "\"-DGRASS_EXPORT=${DLLEXPORT}\" \"-DGRASS_LIB_EXPORT=${DLLIMPORT}\"" )
TARGET_LINK_LIBRARIES(grassprovider qgisgrass)

#
# grass raster provider
#

QT4_WRAP_CPP(GRASS_RASTERPROVIDER_MOC_SRCS qgsgrassrasterprovider.h)
ADD_LIBRARY(grassrasterprovider MODULE qgsgrassrasterprovider.cpp ${GRASS_RASTERPROVIDER_MOC_SRCS})
SET_TARGET_PROPERTIES(grassrasterprovider PROPERTIES COMPILE_FLAGS "\"-DGRASS_EXPORT=${DLLEXPORT}\" \"-DGRASS_LIB_EXPORT=${DLLIMPORT}\"" )
TARGET_LINK_LIBRARIES(grassrasterprovider qgisgrass qgis_core)

# override default path where built files are put to allow running qgis without installing
# the modules go under libexec subdir
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${QGIS_OUTPUT_DIRECTORY}/${QGIS_LIBEXEC_SUBDIR}/grass/modules)

#
# grass raster display module
#

ADD_EXECUTABLE(qgis.d.rast qgis.d.rast.c)
TARGET_LINK_LIBRARIES(qgis.d.rast
  ${GRASS_LIBRARY_gis}
  ${GRASS_LIBRARY_datetime}
  ${GDAL_LIBRARY}
)

#
# grass info module
#

ADD_EXECUTABLE(qgis.g.info qgis.g.info.c)
TARGET_LINK_LIBRARIES(qgis.g.info
  ${GRASS_LIBRARY_gis}
  ${GRASS_LIBRARY_datetime}
  ${GRASS_LIBRARY_gproj}
  ${GDAL_LIBRARY}
)
IF (UNIX)
  TARGET_LINK_LIBRARIES(qgis.g.info m)
ENDIF (UNIX)

########################################################
# Install

INSTALL(TARGETS qgisgrass
  RUNTIME DESTINATION ${QGIS_BIN_DIR}
  LIBRARY DESTINATION ${QGIS_LIB_DIR}
  FRAMEWORK DESTINATION ${QGIS_FW_SUBDIR})

INSTALL(TARGETS ${FAKE_LIB_GRASS_GIS}
  RUNTIME DESTINATION ${QGIS_PLUGIN_DIR}
  LIBRARY DESTINATION ${QGIS_PLUGIN_DIR})
       
INSTALL(TARGETS grassprovider
  RUNTIME DESTINATION ${QGIS_PLUGIN_DIR}
  LIBRARY DESTINATION ${QGIS_PLUGIN_DIR})

INSTALL(TARGETS grassrasterprovider
  RUNTIME DESTINATION ${QGIS_PLUGIN_DIR}
  LIBRARY DESTINATION ${QGIS_PLUGIN_DIR})

INSTALL(TARGETS qgis.d.rast qgis.g.info
        RUNTIME DESTINATION ${QGIS_LIBEXEC_DIR}/grass/modules 
        PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
)
